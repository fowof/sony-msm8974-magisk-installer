#!/sbin/sh

magiskboot="${MAGISK_DIR}/magiskboot"
[ -x "$magiskboot" ] || abort "! magiskboot not found."

magiskinit="${MAGISK_DIR}/magiskinit"
[ -f "$magiskinit" ] || abort "! magiskinit not found."

magiskutil=${MAGISK_DIR}/util_functions.sh
[ -f "$magiskutil" ] || abort "! Magisk util not found"
. "$magiskutil"

[ -d $TMPDIR ] && rm -rf $TMPDIR
mkdir -p $TMPDIR
cd $TMPDIR
chown -R 755 .

mount_partitions
check_data
get_flags
api_level_arch_detect

[ -z $KEEPVERITY       ] && KEEPVERITY=false
[ -z $KEEPFORCEENCRYPT ] && KEEPFORCEENCRYPT=false
[ -z $RECOVERYMODE     ] && RECOVERYMODE=false
export KEEPVERITY
export KEEPFORCEENCRYPT

#
# Search
#

ui_print "- Searching boot image"

find_boot_image
[ -n $BOOTIMAGE ] || abort "! failed to find target image"
ui_print "  - boot image: $BOOTIMAGE"

if [ ! -e "$BOOTIMAGE" ]; then
  abort "! $BOOTIMAGE does not exist!"
elif [ -c "$BOOTIMAGE" ]; then
  nanddump -f boot.img "$BOOTIMAGE"
  BOOTNAND="$BOOTIMAGE"
  BOOTIMAGE=boot.img
elif [ $API -ge 21 ]; then
  if eval $BOOTSIGNER -verify < $BOOTIMAGE; then
    ui_print "  - signed with AVB 1.0"
    BOOTSIGNED=true
  fi
fi

#
# Unpack
#

ui_print "- Unpacking boot image"
"${magiskboot}" unpack "$BOOTIMAGE"

case $? in
  0 ) ;;
  1 ) abort "! Unsupported/Unknown image format";;
  2 ) abort "! ...ChromeOS !?";;
  * ) abort "! Failed to unpack boot image";;
esac

[ -f recovery_dtbo ] && RECOVERYMODE=true

#
# Check
#

# Test patch status and do restore
ui_print "- Checking ramdisk"

should_patch=0
while true
do
  "${magiskboot}" cpio ramdisk.cpio "exists bin/init_sony" || break
  "${magiskboot}" cpio ramdisk.cpio "exists init.real"     || break
  "${magiskboot}" cpio ramdisk.cpio "exists init"          || break
  should_patch=1
  "${magiskboot}" cpio ramdisk.cpio "exists .backup/init"  || break
  should_patch=2
  "${magiskboot}" cpio ramdisk.cpio "extract .backup/init sonytemp" \
    || abort "! Failed to extract .backup/init"
  [ -L sonytemp ] || should_patch=3
  [ -f sonytemp ] && rm sonytemp
  break
done
[ $should_patch -eq 0 ] && abort "! Unexpected file structure"

if [ -e ramdisk.cpio ]; then
  "${magiskboot}" cpio ramdisk.cpio test
  STATUS=$?
else # Stock A only system-as-root
  STATUS=0
fi
case $((STATUS & 3)) in
  0 ) ui_print "  - stock boot image"
    SHA1=$(${magiskboot} sha1 "$BOOTIMAGE" 2>/dev/null)
    cat $BOOTIMAGE > "${MAGISK_DIR}/stock_boot.img"
    cat $BOOTIMAGE | "${magiskboot}" compress=xz - "${SO8974_BACKUP}" \
      || ui_print "* failed to back up boot image"
    ;;
  1 ) ui_print "  - magisk patched boot image"
    "${magiskboot}" cpio ramdisk.cpio "extract .backup/.magisk config" \
      || abort "! failed to extract config"
    SHA1=$(awk '/^SHA1=/{print substr($0, 6)}' config)
    [ -f config  ] && rm config
    [ -n "$SHA1" ] || abort "! SHA1 not recorded in backup"

    "${magiskboot}" cleanup

    backupimg=
    if [ -f /data/magisk_backup_${SHA1}/boot.img.gz ]; then
      backupimg="/data/magisk_backup_${SHA1}/boot.img.gz"
    elif [ -f "${SO8974_BACKUP}" ]; then
      backupimg="${SO8974_BACKUP}"
    else
      abort "! backup not exist, cannot revert to stock"
    fi

    "${magiskboot}" decompress "$backupimg" boot.img \
      || abort "! failed to decompress backup"
    [ "$("${magiskboot}" sha1 "boot.img")" = "$SHA1" ] \
      || abort "! SHA1 mismatch"
    "${magiskboot}" unpack boot.img \
      || abort "! failed to unpack stock boot image"
    ;;
  2 ) abort "! boot image patched by unsupported programs";;
esac

if [ $STATUS -eq 0 -a $should_patch -eq 1 ]; then
  : # install
elif [ $STATUS -eq 1 -a $should_patch -eq 2 ]; then
  : # repatch
elif [ $STATUS -eq 1 -a $should_patch -eq 3 ]; then
  : # udpate
else
  abort "! Unknown randisk state (STATUS=$STATUS, should_patch=$should_patch)"
fi

#
# Patch
#

ui_print "- Patching ramdisk"

echo "KEEPVERITY=$KEEPVERITY"              > config
echo "KEEPFORCEENCRYPT=$KEEPFORCEENCRYPT" >> config
echo "RECOVERYMODE=$RECOVERYMODE"         >> config
[ ! -z $SHA1 ] && echo "SHA1=$SHA1"       >> config

$IS64BIT && SKIP64="" || SKIP64="#"

"${magiskboot}" compress=xz "${MAGISK_DIR}/magisk32" magisk32.xz
$IS64BIT && "${magiskboot}" compress=xz "${MAGISK_DIR}/magisk64" magisk64.xz

cp -af ramdisk.cpio ramdisk.cpio.orig 2>/dev/null

"${magiskboot}" cpio ramdisk.cpio \
  "add 0750 init.real ${magiskinit}" \
  "mkdir 0750 overlay.d" \
  "mkdir 0750 overlay.d/sbin" \
  "add 0644 overlay.d/sbin/magisk32.xz magisk32.xz" \
  "$SKIP64 add 0644 overlay.d/sbin/magisk64.xz magisk64.xz" \
  "patch" \
  "backup ramdisk.cpio.orig" \
  "mkdir 000 .backup" \
  "mv .backup/init.real .backup/init" \
  "add 000 .backup/.magisk config" \
    || abort "! Failed to patch ramdisk"

for dt in dtb kernel_dtb extra
do
  if [ -f $dt ]; then
    "${magiskboot}" dtb $dt patch \
      && ui_print "  + patching fstab in $dt"
  fi
done

if [ -f kernel ]; then
  # Force kernel to load rootfs
  # skip_initramfs -> want_initramfs
  ./magiskboot hexpatch kernel \
  736B69705F696E697472616D667300 \
  77616E745F696E697472616D667300 \
  && ui_print "  + patching kernel"
fi

#
# Repack & Flash
#

ui_print "- Repacking boot image"
"${magiskboot}" repack "$BOOTIMAGE" \
  || abort "! Failed to repack boot image"

# Restore the original boot partition path
[ -e "$BOOTNAND" ] && BOOTIMAGE="$BOOTNAND"

ui_print "- Flashing patched boot image"
flash_image new-boot.img "$BOOTIMAGE"
case $? in
  1) abort "! Insufficient partition size" ;;
  2) abort "! $BOOTIMAGE is read only" ;;
esac

ui_print "- Done"

#
# Install Survive Scripts
#

while true
do
  [ -d /system/addon.d  ] || break

  [ -n "$SO8974_ZIP"    ] || break
  [ -f "$SO8974_ZIP"    ] || break
  [ -n "$SO8974_ADDOND" ] || break

  ui_print "- Installing survival script"

  blockdev --setrw /dev/block/mapper/system$SLOT 2>/dev/null
  mount -o rw,remount /system || mount -o rw,remount /

  ui_print "  - $(basename "$SO8974_ADDOND")"
  printf '#!/sbin/sh\n#\n# ADDOND_VERSION=2\n#\n\n' \
    > "$SO8974_ADDOND" \
    || abort "! failed to install $(basename "$SO8974_ADDOND")"
  unzip -p \
    "$SO8974_ZIP" \
    META-INF/com/google/android/update-binary \
  | awk ' \
    BEGIN {dump=0}
    /^### ADDOND END/   {dump=0}
    dump {print}
    /^### ADDOND START/ {dump=1}
  ' >> "$SO8974_ADDOND" \
    || abort "! failed to install $(basename "$SO8974_ADDOND")"

  ui_print "  - $(basename "$MAGISK_ADDOND")"
  printf '#!/sbin/sh\n#\n# ADDOND_VERSION=2\n#\n\n' \
    > "$MAGISK_ADDOND" \
    || abort "! failed to install $(basename "$MAGISK_ADDOND")"

  chmod 755 "$SO8974_ADDOND" "$MAGISK_ADDOND"

  break
done

recovery_cleanup

exit 0
